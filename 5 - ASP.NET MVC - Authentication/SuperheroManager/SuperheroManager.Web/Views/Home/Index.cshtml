@using SuperHeroManager.DataModels.Superheroes
@model SuperheroManager.Web.Controllers.HomeControllerViewModel

@{
    ViewBag.Title = "Home";
    Layout = "~/Views/_Layout.cshtml";
}

<h2>Team Manager</h2>

@using (Html.BeginForm("AddTeam", "Home", FormMethod.Post))
{
  <div>
    <h3>
      Add Team
    </h3>

    <div class="form-group">
      <label class="control-label">
        Team name
      </label>

      @Html.ValidationMessageFor(model => model.TeamName)
      @Html.TextBoxFor(model => model.TeamName, new {placeholder = "Type your team name here ...", @class = "form-control"})
    </div>

    <div class="pull-right">
      <input type="submit" value="Add team" class="btn btn-xs btn-primary"/>
    </div>
  </div>
}

<nav>
  <ul class="pagination">
    <li>
      @{
        var previousPage = Math.Max(Model.CurrentPage - 1, 0);
        var nextPage = Math.Min(Model.CurrentPage + 1, Model.MaxPages - 1);
        var isDescending = Model.IsDescending.HasValue && Model.IsDescending.Value;
      }
      @if (Model.IsDescending.HasValue)
      {
        <a href="@Url.Action("GetTeams", "Home", new {page = previousPage, isDescending })" aria-label="Previous">
          <span aria-hidden="true">&laquo;</span>
        </a>
      }
      else
      {
        <a href="@Url.Action("Index", "Home", new {page = previousPage })" aria-label="Previous">
          <span aria-hidden="true">&laquo;</span>
        </a>
      }
    </li>

    @for (var index = 0; index < Model.MaxPages; index++)
    {
      var isActive = index == Model.CurrentPage ? "active" : "";

      <li class="@isActive">
        @if (Model.IsDescending.HasValue)
        {
          <a href="@Url.Action("GetTeams", "Home", new { page = index, isDescending })">
            @(index + 1)
          </a>
        }
        else {
          <a href="@Url.Action("Index", "Home", new { page = index })">
            @(index + 1)
          </a>
        }
      </li>
    }

    <li>
      @if (Model.IsDescending.HasValue)
      {
        <a href="@Url.Action("GetTeams", "Home", new { page = nextPage, isDescending })" aria-label="Next">
          <span aria-hidden="true">&raquo;</span>
        </a>
      }
      else
      {
        <a href="@Url.Action("Index", "Home", new {page = nextPage})" aria-label="Next">
          <span aria-hidden="true">&raquo;</span>
        </a>
      }
    </li>
  </ul>
</nav>

<div class="text-right">
  <a href="@Url.Action("GetTeams", "Home", new { isDescending = Model.IsDescending.HasValue && !Model.IsDescending.Value, page = Model.CurrentPage })" class="btn btn-default btn-sm">
    <i class="glyphicon glyphicon-sort-by-attributes"></i>
    @{ var sortLabel = Model.IsDescending == true ? "ascending" : "descending"; }
    Sort @sortLabel
  </a>
</div>

<table class="table table-responsive">
  <thead>
  <tr>
    <th>Team name</th>
    <th>Superheroes</th>
    <th>Actions</th>
  </tr>
  </thead>

  @foreach (var team in Model.Teams)
  {
    <tr>
      <td>
        @team.Name
      </td>
      <td title="@GetSuperheroes(team)">
        @ShowSuperheroes(team)
      </td>
      <td>
        <a href="#" class="btn btn-default">
          Details
        </a>
        <a href="@Url.Action("RemoveTeam", new { id = team.Id })" class="btn btn-danger">
          <i class="glyphicon glyphicon-trash"></i>
          Remove
        </a>
      </td>
    </tr>
  }
</table>

@functions {

    public String GetSuperheroes(Team team) => String.Join(", ", team.SuperHeroes.Select(hero => hero.Name));

    public String ShowSuperheroes(Team team)
    {
      var superheroes = GetSuperheroes(team);
      var truncated = superheroes.Substring(0, Math.Min(100, superheroes.Length));

      if (truncated.Length == superheroes.Length) return truncated;

      return $"{truncated}...";
    }

}